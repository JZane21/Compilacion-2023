/*
 * generated by Xtext 2.31.0
 */
grammar InternalIAmGroot;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package edu.upb.lp.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.upb.lp.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import edu.upb.lp.services.IAmGrootGrammarAccess;

}
@parser::members {
	private IAmGrootGrammarAccess grammarAccess;

	public void setGrammarAccess(IAmGrootGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGroot
entryRuleGroot
:
{ before(grammarAccess.getGrootRule()); }
	 ruleGroot
{ after(grammarAccess.getGrootRule()); } 
	 EOF 
;

// Rule Groot
ruleGroot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGrootAccess().getGroup()); }
		(rule__Groot__Group__0)
		{ after(grammarAccess.getGrootAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSentence
entryRuleSentence
:
{ before(grammarAccess.getSentenceRule()); }
	 ruleSentence
{ after(grammarAccess.getSentenceRule()); } 
	 EOF 
;

// Rule Sentence
ruleSentence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSentenceAccess().getAlternatives()); }
		(rule__Sentence__Alternatives)
		{ after(grammarAccess.getSentenceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getGroup()); }
		(rule__Declaration__Group__0)
		{ after(grammarAccess.getDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGrootTypes
entryRuleGrootTypes
:
{ before(grammarAccess.getGrootTypesRule()); }
	 ruleGrootTypes
{ after(grammarAccess.getGrootTypesRule()); } 
	 EOF 
;

// Rule GrootTypes
ruleGrootTypes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGrootTypesAccess().getAlternatives()); }
		(rule__GrootTypes__Alternatives)
		{ after(grammarAccess.getGrootTypesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInitializationNum
entryRuleInitializationNum
:
{ before(grammarAccess.getInitializationNumRule()); }
	 ruleInitializationNum
{ after(grammarAccess.getInitializationNumRule()); } 
	 EOF 
;

// Rule InitializationNum
ruleInitializationNum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInitializationNumAccess().getAssignationNumParserRuleCall()); }
		ruleAssignationNum
		{ after(grammarAccess.getInitializationNumAccess().getAssignationNumParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInitializationStr
entryRuleInitializationStr
:
{ before(grammarAccess.getInitializationStrRule()); }
	 ruleInitializationStr
{ after(grammarAccess.getInitializationStrRule()); } 
	 EOF 
;

// Rule InitializationStr
ruleInitializationStr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInitializationStrAccess().getAssignationStrParserRuleCall()); }
		ruleAssignationStr
		{ after(grammarAccess.getInitializationStrAccess().getAssignationStrParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInitializationBool
entryRuleInitializationBool
:
{ before(grammarAccess.getInitializationBoolRule()); }
	 ruleInitializationBool
{ after(grammarAccess.getInitializationBoolRule()); } 
	 EOF 
;

// Rule InitializationBool
ruleInitializationBool 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInitializationBoolAccess().getAssignationBoolParserRuleCall()); }
		ruleAssignationBool
		{ after(grammarAccess.getInitializationBoolAccess().getAssignationBoolParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignation
entryRuleAssignation
:
{ before(grammarAccess.getAssignationRule()); }
	 ruleAssignation
{ after(grammarAccess.getAssignationRule()); } 
	 EOF 
;

// Rule Assignation
ruleAssignation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignationAccess().getGroup()); }
		(rule__Assignation__Group__0)
		{ after(grammarAccess.getAssignationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignationValue
entryRuleAssignationValue
:
{ before(grammarAccess.getAssignationValueRule()); }
	 ruleAssignationValue
{ after(grammarAccess.getAssignationValueRule()); } 
	 EOF 
;

// Rule AssignationValue
ruleAssignationValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignationValueAccess().getAlternatives()); }
		(rule__AssignationValue__Alternatives)
		{ after(grammarAccess.getAssignationValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignationNum
entryRuleAssignationNum
:
{ before(grammarAccess.getAssignationNumRule()); }
	 ruleAssignationNum
{ after(grammarAccess.getAssignationNumRule()); } 
	 EOF 
;

// Rule AssignationNum
ruleAssignationNum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignationNumAccess().getGroup()); }
		(rule__AssignationNum__Group__0)
		{ after(grammarAccess.getAssignationNumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignationStr
entryRuleAssignationStr
:
{ before(grammarAccess.getAssignationStrRule()); }
	 ruleAssignationStr
{ after(grammarAccess.getAssignationStrRule()); } 
	 EOF 
;

// Rule AssignationStr
ruleAssignationStr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignationStrAccess().getGroup()); }
		(rule__AssignationStr__Group__0)
		{ after(grammarAccess.getAssignationStrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignationBool
entryRuleAssignationBool
:
{ before(grammarAccess.getAssignationBoolRule()); }
	 ruleAssignationBool
{ after(grammarAccess.getAssignationBoolRule()); } 
	 EOF 
;

// Rule AssignationBool
ruleAssignationBool 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignationBoolAccess().getGroup()); }
		(rule__AssignationBool__Group__0)
		{ after(grammarAccess.getAssignationBoolAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSentenceAccess().getDeclarationParserRuleCall_0()); }
		ruleDeclaration
		{ after(grammarAccess.getSentenceAccess().getDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSentenceAccess().getAssignationParserRuleCall_1()); }
		ruleAssignation
		{ after(grammarAccess.getSentenceAccess().getAssignationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGrootTypesAccess().getGroup_0()); }
		(rule__GrootTypes__Group_0__0)
		{ after(grammarAccess.getGrootTypesAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getGrootTypesAccess().getGroup_1()); }
		(rule__GrootTypes__Group_1__0)
		{ after(grammarAccess.getGrootTypesAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getGrootTypesAccess().getGroup_2()); }
		(rule__GrootTypes__Group_2__0)
		{ after(grammarAccess.getGrootTypesAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignationValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignationValueAccess().getAssignationNumParserRuleCall_0()); }
		ruleAssignationNum
		{ after(grammarAccess.getAssignationValueAccess().getAssignationNumParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssignationValueAccess().getAssignationStrParserRuleCall_1()); }
		ruleAssignationStr
		{ after(grammarAccess.getAssignationValueAccess().getAssignationStrParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssignationValueAccess().getAssignationBoolParserRuleCall_2()); }
		ruleAssignationBool
		{ after(grammarAccess.getAssignationValueAccess().getAssignationBoolParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramAction_0()); }
	()
	{ after(grammarAccess.getProgramAccess().getProgramAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getWeAreGrootKeyword_1()); }
	'WeAreGroot'
	{ after(grammarAccess.getProgramAccess().getWeAreGrootKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__3__Impl
	rule__Program__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getGrootsAssignment_3()); }
	(rule__Program__GrootsAssignment_3)*
	{ after(grammarAccess.getProgramAccess().getGrootsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Groot__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Groot__Group__0__Impl
	rule__Groot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Groot__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrootAccess().getSentenceParserRuleCall_0()); }
	ruleSentence
	{ after(grammarAccess.getGrootAccess().getSentenceParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Groot__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Groot__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Groot__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrootAccess().getLeafKeyword_1()); }
	'Leaf'
	{ after(grammarAccess.getGrootAccess().getLeafKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getNameAssignment_0()); }
	(rule__Declaration__NameAssignment_0)
	{ after(grammarAccess.getDeclarationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__1__Impl
	rule__Declaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getIsKeyword_1()); }
	'is'
	{ after(grammarAccess.getDeclarationAccess().getIsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getTypeAssignment_2()); }
	(rule__Declaration__TypeAssignment_2)
	{ after(grammarAccess.getDeclarationAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GrootTypes__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrootTypes__Group_0__0__Impl
	rule__GrootTypes__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrootTypesAccess().getGrootTypesAction_0_0()); }
	()
	{ after(grammarAccess.getGrootTypesAccess().getGrootTypesAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrootTypes__Group_0__1__Impl
	rule__GrootTypes__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrootTypesAccess().getNumbootKeyword_0_1()); }
	'Numboot'
	{ after(grammarAccess.getGrootTypesAccess().getNumbootKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrootTypes__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrootTypesAccess().getValueAssignment_0_2()); }
	(rule__GrootTypes__ValueAssignment_0_2)?
	{ after(grammarAccess.getGrootTypesAccess().getValueAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GrootTypes__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrootTypes__Group_1__0__Impl
	rule__GrootTypes__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrootTypesAccess().getGrootTypesAction_1_0()); }
	()
	{ after(grammarAccess.getGrootTypesAccess().getGrootTypesAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrootTypes__Group_1__1__Impl
	rule__GrootTypes__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrootTypesAccess().getStrootKeyword_1_1()); }
	'Stroot'
	{ after(grammarAccess.getGrootTypesAccess().getStrootKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrootTypes__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrootTypesAccess().getValueAssignment_1_2()); }
	(rule__GrootTypes__ValueAssignment_1_2)?
	{ after(grammarAccess.getGrootTypesAccess().getValueAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GrootTypes__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrootTypes__Group_2__0__Impl
	rule__GrootTypes__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrootTypesAccess().getGrootTypesAction_2_0()); }
	()
	{ after(grammarAccess.getGrootTypesAccess().getGrootTypesAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrootTypes__Group_2__1__Impl
	rule__GrootTypes__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrootTypesAccess().getBooltKeyword_2_1()); }
	'Boolt'
	{ after(grammarAccess.getGrootTypesAccess().getBooltKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GrootTypes__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGrootTypesAccess().getValueAssignment_2_2()); }
	(rule__GrootTypes__ValueAssignment_2_2)?
	{ after(grammarAccess.getGrootTypesAccess().getValueAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignation__Group__0__Impl
	rule__Assignation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignationAccess().getNameAssignment_0()); }
	(rule__Assignation__NameAssignment_0)
	{ after(grammarAccess.getAssignationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignationAccess().getValueAssignment_1()); }
	(rule__Assignation__ValueAssignment_1)
	{ after(grammarAccess.getAssignationAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignationNum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignationNum__Group__0__Impl
	rule__AssignationNum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignationNum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignationNumAccess().getHyphenMinusGreaterThanSignKeyword_0()); }
	'->'
	{ after(grammarAccess.getAssignationNumAccess().getHyphenMinusGreaterThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignationNum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignationNum__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignationNum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignationNumAccess().getNumberAssignment_1()); }
	(rule__AssignationNum__NumberAssignment_1)
	{ after(grammarAccess.getAssignationNumAccess().getNumberAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignationStr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignationStr__Group__0__Impl
	rule__AssignationStr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignationStr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignationStrAccess().getHyphenMinusGreaterThanSignKeyword_0()); }
	'->'
	{ after(grammarAccess.getAssignationStrAccess().getHyphenMinusGreaterThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignationStr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignationStr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignationStr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignationStrAccess().getStringAssignment_1()); }
	(rule__AssignationStr__StringAssignment_1)
	{ after(grammarAccess.getAssignationStrAccess().getStringAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignationBool__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignationBool__Group__0__Impl
	rule__AssignationBool__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignationBool__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignationBoolAccess().getHyphenMinusGreaterThanSignKeyword_0()); }
	'->'
	{ after(grammarAccess.getAssignationBoolAccess().getHyphenMinusGreaterThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignationBool__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignationBool__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignationBool__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignationBoolAccess().getBooleanAssignment_1()); }
	(rule__AssignationBool__BooleanAssignment_1)
	{ after(grammarAccess.getAssignationBoolAccess().getBooleanAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__GrootsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getGrootsGrootParserRuleCall_3_0()); }
		ruleGroot
		{ after(grammarAccess.getProgramAccess().getGrootsGrootParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getTypeGrootTypesParserRuleCall_2_0()); }
		ruleGrootTypes
		{ after(grammarAccess.getDeclarationAccess().getTypeGrootTypesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__ValueAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGrootTypesAccess().getValueInitializationNumParserRuleCall_0_2_0()); }
		ruleInitializationNum
		{ after(grammarAccess.getGrootTypesAccess().getValueInitializationNumParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__ValueAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGrootTypesAccess().getValueInitializationStrParserRuleCall_1_2_0()); }
		ruleInitializationStr
		{ after(grammarAccess.getGrootTypesAccess().getValueInitializationStrParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GrootTypes__ValueAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGrootTypesAccess().getValueInitializationBoolParserRuleCall_2_2_0()); }
		ruleInitializationBool
		{ after(grammarAccess.getGrootTypesAccess().getValueInitializationBoolParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignation__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignationAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAssignationAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignation__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignationAccess().getValueAssignationValueParserRuleCall_1_0()); }
		ruleAssignationValue
		{ after(grammarAccess.getAssignationAccess().getValueAssignationValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignationNum__NumberAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignationNumAccess().getNumberINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getAssignationNumAccess().getNumberINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignationStr__StringAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignationStrAccess().getStringSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAssignationStrAccess().getStringSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignationBool__BooleanAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignationBoolAccess().getBooleanBOOLEANTerminalRuleCall_1_0()); }
		RULE_BOOLEAN
		{ after(grammarAccess.getAssignationBoolAccess().getBooleanBOOLEANTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_BOOLEAN : ('froot#'|'troot#');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
