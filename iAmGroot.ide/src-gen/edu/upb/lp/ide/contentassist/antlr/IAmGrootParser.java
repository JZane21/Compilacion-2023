/*
 * generated by Xtext 2.31.0
 */
package edu.upb.lp.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import edu.upb.lp.ide.contentassist.antlr.internal.InternalIAmGrootParser;
import edu.upb.lp.services.IAmGrootGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class IAmGrootParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(IAmGrootGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, IAmGrootGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSentenceAccess().getAlternatives(), "rule__Sentence__Alternatives");
			builder.put(grammarAccess.getGrootTypesAccess().getAlternatives(), "rule__GrootTypes__Alternatives");
			builder.put(grammarAccess.getAssignationValueAccess().getAlternatives(), "rule__AssignationValue__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getGrootAccess().getGroup(), "rule__Groot__Group__0");
			builder.put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
			builder.put(grammarAccess.getGrootTypesAccess().getGroup_0(), "rule__GrootTypes__Group_0__0");
			builder.put(grammarAccess.getGrootTypesAccess().getGroup_1(), "rule__GrootTypes__Group_1__0");
			builder.put(grammarAccess.getGrootTypesAccess().getGroup_2(), "rule__GrootTypes__Group_2__0");
			builder.put(grammarAccess.getAssignationAccess().getGroup(), "rule__Assignation__Group__0");
			builder.put(grammarAccess.getAssignationNumAccess().getGroup(), "rule__AssignationNum__Group__0");
			builder.put(grammarAccess.getAssignationStrAccess().getGroup(), "rule__AssignationStr__Group__0");
			builder.put(grammarAccess.getAssignationBoolAccess().getGroup(), "rule__AssignationBool__Group__0");
			builder.put(grammarAccess.getProgramAccess().getGrootsAssignment_3(), "rule__Program__GrootsAssignment_3");
			builder.put(grammarAccess.getDeclarationAccess().getNameAssignment_0(), "rule__Declaration__NameAssignment_0");
			builder.put(grammarAccess.getDeclarationAccess().getTypeAssignment_2(), "rule__Declaration__TypeAssignment_2");
			builder.put(grammarAccess.getGrootTypesAccess().getValueAssignment_0_2(), "rule__GrootTypes__ValueAssignment_0_2");
			builder.put(grammarAccess.getGrootTypesAccess().getValueAssignment_1_2(), "rule__GrootTypes__ValueAssignment_1_2");
			builder.put(grammarAccess.getGrootTypesAccess().getValueAssignment_2_2(), "rule__GrootTypes__ValueAssignment_2_2");
			builder.put(grammarAccess.getAssignationAccess().getNameAssignment_0(), "rule__Assignation__NameAssignment_0");
			builder.put(grammarAccess.getAssignationAccess().getValueAssignment_1(), "rule__Assignation__ValueAssignment_1");
			builder.put(grammarAccess.getAssignationNumAccess().getNumberAssignment_1(), "rule__AssignationNum__NumberAssignment_1");
			builder.put(grammarAccess.getAssignationStrAccess().getStringAssignment_1(), "rule__AssignationStr__StringAssignment_1");
			builder.put(grammarAccess.getAssignationBoolAccess().getBooleanAssignment_1(), "rule__AssignationBool__BooleanAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private IAmGrootGrammarAccess grammarAccess;

	@Override
	protected InternalIAmGrootParser createParser() {
		InternalIAmGrootParser result = new InternalIAmGrootParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public IAmGrootGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(IAmGrootGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
