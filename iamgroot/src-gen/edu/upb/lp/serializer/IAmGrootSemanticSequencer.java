/*
 * generated by Xtext 2.31.0
 */
package edu.upb.lp.serializer;

import com.google.inject.Inject;
import edu.upb.lp.iAmGroot.Assignation;
import edu.upb.lp.iAmGroot.AssignationBool;
import edu.upb.lp.iAmGroot.AssignationNum;
import edu.upb.lp.iAmGroot.AssignationStr;
import edu.upb.lp.iAmGroot.Declaration;
import edu.upb.lp.iAmGroot.GrootTypes;
import edu.upb.lp.iAmGroot.IAmGrootPackage;
import edu.upb.lp.iAmGroot.Program;
import edu.upb.lp.services.IAmGrootGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class IAmGrootSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private IAmGrootGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == IAmGrootPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case IAmGrootPackage.ASSIGNATION:
				sequence_Assignation(context, (Assignation) semanticObject); 
				return; 
			case IAmGrootPackage.ASSIGNATION_BOOL:
				sequence_AssignationBool(context, (AssignationBool) semanticObject); 
				return; 
			case IAmGrootPackage.ASSIGNATION_NUM:
				sequence_AssignationNum(context, (AssignationNum) semanticObject); 
				return; 
			case IAmGrootPackage.ASSIGNATION_STR:
				sequence_AssignationStr(context, (AssignationStr) semanticObject); 
				return; 
			case IAmGrootPackage.DECLARATION:
				sequence_Declaration(context, (Declaration) semanticObject); 
				return; 
			case IAmGrootPackage.GROOT_TYPES:
				sequence_GrootTypes(context, (GrootTypes) semanticObject); 
				return; 
			case IAmGrootPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     InitializationBool returns AssignationBool
	 *     AssignationValue returns AssignationBool
	 *     AssignationBool returns AssignationBool
	 *
	 * Constraint:
	 *     boolean=BOOLEAN
	 * </pre>
	 */
	protected void sequence_AssignationBool(ISerializationContext context, AssignationBool semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IAmGrootPackage.Literals.ASSIGNATION_BOOL__BOOLEAN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IAmGrootPackage.Literals.ASSIGNATION_BOOL__BOOLEAN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignationBoolAccess().getBooleanBOOLEANTerminalRuleCall_1_0(), semanticObject.getBoolean());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     InitializationNum returns AssignationNum
	 *     AssignationValue returns AssignationNum
	 *     AssignationNum returns AssignationNum
	 *
	 * Constraint:
	 *     number=INT
	 * </pre>
	 */
	protected void sequence_AssignationNum(ISerializationContext context, AssignationNum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IAmGrootPackage.Literals.ASSIGNATION_NUM__NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IAmGrootPackage.Literals.ASSIGNATION_NUM__NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignationNumAccess().getNumberINTTerminalRuleCall_1_0(), semanticObject.getNumber());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     InitializationStr returns AssignationStr
	 *     AssignationValue returns AssignationStr
	 *     AssignationStr returns AssignationStr
	 *
	 * Constraint:
	 *     string=STRING
	 * </pre>
	 */
	protected void sequence_AssignationStr(ISerializationContext context, AssignationStr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IAmGrootPackage.Literals.ASSIGNATION_STR__STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IAmGrootPackage.Literals.ASSIGNATION_STR__STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignationStrAccess().getStringSTRINGTerminalRuleCall_1_0(), semanticObject.getString());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Groot returns Assignation
	 *     Sentence returns Assignation
	 *     Assignation returns Assignation
	 *
	 * Constraint:
	 *     (name=ID value=AssignationValue)
	 * </pre>
	 */
	protected void sequence_Assignation(ISerializationContext context, Assignation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IAmGrootPackage.Literals.SENTENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IAmGrootPackage.Literals.SENTENCE__NAME));
			if (transientValues.isValueTransient(semanticObject, IAmGrootPackage.Literals.ASSIGNATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IAmGrootPackage.Literals.ASSIGNATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignationAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAssignationAccess().getValueAssignationValueParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Groot returns Declaration
	 *     Sentence returns Declaration
	 *     Declaration returns Declaration
	 *
	 * Constraint:
	 *     (name=ID type=GrootTypes)
	 * </pre>
	 */
	protected void sequence_Declaration(ISerializationContext context, Declaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IAmGrootPackage.Literals.SENTENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IAmGrootPackage.Literals.SENTENCE__NAME));
			if (transientValues.isValueTransient(semanticObject, IAmGrootPackage.Literals.DECLARATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IAmGrootPackage.Literals.DECLARATION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclarationAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDeclarationAccess().getTypeGrootTypesParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GrootTypes returns GrootTypes
	 *
	 * Constraint:
	 *     (value=InitializationNum | value=InitializationStr | value=InitializationBool)?
	 * </pre>
	 */
	protected void sequence_GrootTypes(ISerializationContext context, GrootTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     groots+=Groot*
	 * </pre>
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
