/*
 * generated by Xtext 2.31.0
 */
package edu.upb.lp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IAmGrootGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWeAreGrootKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGrootsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGrootsGrootParserRuleCall_3_0 = (RuleCall)cGrootsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Program:
		//    {Program} 'WeAreGroot' '{' groots+=Groot* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Program} 'WeAreGroot' '{' groots+=Groot* '}'
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'WeAreGroot'
		public Keyword getWeAreGrootKeyword_1() { return cWeAreGrootKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//groots+=Groot*
		public Assignment getGrootsAssignment_3() { return cGrootsAssignment_3; }
		
		//Groot
		public RuleCall getGrootsGrootParserRuleCall_3_0() { return cGrootsGrootParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GrootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.Groot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSentenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeafKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Groot:
		//    Sentence 'Leaf';
		@Override public ParserRule getRule() { return rule; }
		
		//Sentence 'Leaf'
		public Group getGroup() { return cGroup; }
		
		//Sentence
		public RuleCall getSentenceParserRuleCall_0() { return cSentenceParserRuleCall_0; }
		
		//'Leaf'
		public Keyword getLeafKeyword_1() { return cLeafKeyword_1; }
	}
	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.Sentence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Sentence:
		//    Declaration | Assignation;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | Assignation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//Assignation
		public RuleCall getAssignationParserRuleCall_1() { return cAssignationParserRuleCall_1; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeGrootTypesParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Declaration:
		//    name=ID 'is' type=GrootTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'is' type=GrootTypes
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//type=GrootTypes
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//GrootTypes
		public RuleCall getTypeGrootTypesParserRuleCall_2_0() { return cTypeGrootTypesParserRuleCall_2_0; }
	}
	public class GrootTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.GrootTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cGrootTypesAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNumbootKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueInitializationNumParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cGrootTypesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cStrootKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueInitializationStrParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cGrootTypesAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cBooltKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueInitializationBoolParserRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		
		//GrootTypes:
		//    {GrootTypes} 'Numboot' value=InitializationNum? | {GrootTypes} 'Stroot' value=InitializationStr? | {GrootTypes}
		//    'Boolt'
		//    value=InitializationBool?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GrootTypes} 'Numboot' value=InitializationNum? | {GrootTypes} 'Stroot' value=InitializationStr? | {GrootTypes}
		//'Boolt'
		//value=InitializationBool?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{GrootTypes} 'Numboot' value=InitializationNum?
		public Group getGroup_0() { return cGroup_0; }
		
		//{GrootTypes}
		public Action getGrootTypesAction_0_0() { return cGrootTypesAction_0_0; }
		
		//'Numboot'
		public Keyword getNumbootKeyword_0_1() { return cNumbootKeyword_0_1; }
		
		//value=InitializationNum?
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//InitializationNum
		public RuleCall getValueInitializationNumParserRuleCall_0_2_0() { return cValueInitializationNumParserRuleCall_0_2_0; }
		
		//{GrootTypes} 'Stroot' value=InitializationStr?
		public Group getGroup_1() { return cGroup_1; }
		
		//{GrootTypes}
		public Action getGrootTypesAction_1_0() { return cGrootTypesAction_1_0; }
		
		//'Stroot'
		public Keyword getStrootKeyword_1_1() { return cStrootKeyword_1_1; }
		
		//value=InitializationStr?
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//InitializationStr
		public RuleCall getValueInitializationStrParserRuleCall_1_2_0() { return cValueInitializationStrParserRuleCall_1_2_0; }
		
		//{GrootTypes}
		//   'Boolt'
		//   value=InitializationBool?
		public Group getGroup_2() { return cGroup_2; }
		
		//{GrootTypes}
		public Action getGrootTypesAction_2_0() { return cGrootTypesAction_2_0; }
		
		//'Boolt'
		public Keyword getBooltKeyword_2_1() { return cBooltKeyword_2_1; }
		
		//value=InitializationBool?
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }
		
		//InitializationBool
		public RuleCall getValueInitializationBoolParserRuleCall_2_2_0() { return cValueInitializationBoolParserRuleCall_2_2_0; }
	}
	public class InitializationNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.InitializationNum");
		private final RuleCall cAssignationNumParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InitializationNum:
		//    AssignationNum;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignationNum
		public RuleCall getAssignationNumParserRuleCall() { return cAssignationNumParserRuleCall; }
	}
	public class InitializationStrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.InitializationStr");
		private final RuleCall cAssignationStrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InitializationStr:
		//    AssignationStr;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignationStr
		public RuleCall getAssignationStrParserRuleCall() { return cAssignationStrParserRuleCall; }
	}
	public class InitializationBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.InitializationBool");
		private final RuleCall cAssignationBoolParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InitializationBool:
		//    AssignationBool;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignationBool
		public RuleCall getAssignationBoolParserRuleCall() { return cAssignationBoolParserRuleCall; }
	}
	public class AssignationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.Assignation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueAssignationValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Assignation:
		//    name=ID value=AssignationValue;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID value=AssignationValue
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//value=AssignationValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//AssignationValue
		public RuleCall getValueAssignationValueParserRuleCall_1_0() { return cValueAssignationValueParserRuleCall_1_0; }
	}
	public class AssignationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.AssignationValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignationNumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignationStrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignationBoolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AssignationValue:
		//    AssignationNum | AssignationStr | AssignationBool;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignationNum | AssignationStr | AssignationBool
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AssignationNum
		public RuleCall getAssignationNumParserRuleCall_0() { return cAssignationNumParserRuleCall_0; }
		
		//AssignationStr
		public RuleCall getAssignationStrParserRuleCall_1() { return cAssignationStrParserRuleCall_1; }
		
		//AssignationBool
		public RuleCall getAssignationBoolParserRuleCall_2() { return cAssignationBoolParserRuleCall_2; }
	}
	public class AssignationNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.AssignationNum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		
		//AssignationNum:
		//    '->' number=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' number=INT
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
	}
	public class AssignationStrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.AssignationStr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		
		//AssignationStr:
		//    '->' string=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' string=STRING
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
	}
	public class AssignationBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.AssignationBool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBooleanAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBooleanBOOLEANTerminalRuleCall_1_0 = (RuleCall)cBooleanAssignment_1.eContents().get(0);
		
		//AssignationBool:
		//    '->' boolean=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//'->' boolean=BOOLEAN
		public Group getGroup() { return cGroup; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }
		
		//boolean=BOOLEAN
		public Assignment getBooleanAssignment_1() { return cBooleanAssignment_1; }
		
		//BOOLEAN
		public RuleCall getBooleanBOOLEANTerminalRuleCall_1_0() { return cBooleanBOOLEANTerminalRuleCall_1_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final GrootElements pGroot;
	private final SentenceElements pSentence;
	private final DeclarationElements pDeclaration;
	private final GrootTypesElements pGrootTypes;
	private final InitializationNumElements pInitializationNum;
	private final InitializationStrElements pInitializationStr;
	private final InitializationBoolElements pInitializationBool;
	private final AssignationElements pAssignation;
	private final AssignationValueElements pAssignationValue;
	private final AssignationNumElements pAssignationNum;
	private final AssignationStrElements pAssignationStr;
	private final AssignationBoolElements pAssignationBool;
	private final TerminalRule tBOOLEAN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IAmGrootGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pGroot = new GrootElements();
		this.pSentence = new SentenceElements();
		this.pDeclaration = new DeclarationElements();
		this.pGrootTypes = new GrootTypesElements();
		this.pInitializationNum = new InitializationNumElements();
		this.pInitializationStr = new InitializationStrElements();
		this.pInitializationBool = new InitializationBoolElements();
		this.pAssignation = new AssignationElements();
		this.pAssignationValue = new AssignationValueElements();
		this.pAssignationNum = new AssignationNumElements();
		this.pAssignationStr = new AssignationStrElements();
		this.pAssignationBool = new AssignationBoolElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.IAmGroot.BOOLEAN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.IAmGroot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//    {Program} 'WeAreGroot' '{' groots+=Groot* '}';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Groot:
	//    Sentence 'Leaf';
	public GrootElements getGrootAccess() {
		return pGroot;
	}
	
	public ParserRule getGrootRule() {
		return getGrootAccess().getRule();
	}
	
	//Sentence:
	//    Declaration | Assignation;
	public SentenceElements getSentenceAccess() {
		return pSentence;
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}
	
	//Declaration:
	//    name=ID 'is' type=GrootTypes;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//GrootTypes:
	//    {GrootTypes} 'Numboot' value=InitializationNum? | {GrootTypes} 'Stroot' value=InitializationStr? | {GrootTypes}
	//    'Boolt'
	//    value=InitializationBool?;
	public GrootTypesElements getGrootTypesAccess() {
		return pGrootTypes;
	}
	
	public ParserRule getGrootTypesRule() {
		return getGrootTypesAccess().getRule();
	}
	
	//InitializationNum:
	//    AssignationNum;
	public InitializationNumElements getInitializationNumAccess() {
		return pInitializationNum;
	}
	
	public ParserRule getInitializationNumRule() {
		return getInitializationNumAccess().getRule();
	}
	
	//InitializationStr:
	//    AssignationStr;
	public InitializationStrElements getInitializationStrAccess() {
		return pInitializationStr;
	}
	
	public ParserRule getInitializationStrRule() {
		return getInitializationStrAccess().getRule();
	}
	
	//InitializationBool:
	//    AssignationBool;
	public InitializationBoolElements getInitializationBoolAccess() {
		return pInitializationBool;
	}
	
	public ParserRule getInitializationBoolRule() {
		return getInitializationBoolAccess().getRule();
	}
	
	//Assignation:
	//    name=ID value=AssignationValue;
	public AssignationElements getAssignationAccess() {
		return pAssignation;
	}
	
	public ParserRule getAssignationRule() {
		return getAssignationAccess().getRule();
	}
	
	//AssignationValue:
	//    AssignationNum | AssignationStr | AssignationBool;
	public AssignationValueElements getAssignationValueAccess() {
		return pAssignationValue;
	}
	
	public ParserRule getAssignationValueRule() {
		return getAssignationValueAccess().getRule();
	}
	
	//AssignationNum:
	//    '->' number=INT;
	public AssignationNumElements getAssignationNumAccess() {
		return pAssignationNum;
	}
	
	public ParserRule getAssignationNumRule() {
		return getAssignationNumAccess().getRule();
	}
	
	//AssignationStr:
	//    '->' string=STRING;
	public AssignationStrElements getAssignationStrAccess() {
		return pAssignationStr;
	}
	
	public ParserRule getAssignationStrRule() {
		return getAssignationStrAccess().getRule();
	}
	
	//AssignationBool:
	//    '->' boolean=BOOLEAN;
	public AssignationBoolElements getAssignationBoolAccess() {
		return pAssignationBool;
	}
	
	public ParserRule getAssignationBoolRule() {
		return getAssignationBoolAccess().getRule();
	}
	
	//terminal BOOLEAN:
	//    ('froot#') | ('troot#');
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
