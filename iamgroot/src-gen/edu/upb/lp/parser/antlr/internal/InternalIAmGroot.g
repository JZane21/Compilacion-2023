/*
 * generated by Xtext 2.31.0
 */
grammar InternalIAmGroot;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.upb.lp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.upb.lp.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.upb.lp.services.IAmGrootGrammarAccess;

}

@parser::members {

 	private IAmGrootGrammarAccess grammarAccess;

    public InternalIAmGrootParser(TokenStream input, IAmGrootGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected IAmGrootGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProgramAccess().getProgramAction_0(),
					$current);
			}
		)
		otherlv_1='WeAreGroot'
		{
			newLeafNode(otherlv_1, grammarAccess.getProgramAccess().getWeAreGrootKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getGrootsGrootParserRuleCall_3_0());
				}
				lv_groots_3_0=ruleGroot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"groots",
						lv_groots_3_0,
						"edu.upb.lp.IAmGroot.Groot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleGroot
entryRuleGroot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGrootRule()); }
	iv_ruleGroot=ruleGroot
	{ $current=$iv_ruleGroot.current; }
	EOF;

// Rule Groot
ruleGroot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGrootAccess().getSentenceParserRuleCall_0());
		}
		this_Sentence_0=ruleSentence
		{
			$current = $this_Sentence_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='Leaf'
		{
			newLeafNode(otherlv_1, grammarAccess.getGrootAccess().getLeafKeyword_1());
		}
	)
;

// Entry rule entryRuleSentence
entryRuleSentence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSentenceRule()); }
	iv_ruleSentence=ruleSentence
	{ $current=$iv_ruleSentence.current; }
	EOF;

// Rule Sentence
ruleSentence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSentenceAccess().getDeclarationParserRuleCall_0());
		}
		this_Declaration_0=ruleDeclaration
		{
			$current = $this_Declaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSentenceAccess().getAssignationParserRuleCall_1());
		}
		this_Assignation_1=ruleAssignation
		{
			$current = $this_Assignation_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getDeclarationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getDeclarationAccess().getIsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getTypeGrootTypesParserRuleCall_2_0());
				}
				lv_type_2_0=ruleGrootTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"edu.upb.lp.IAmGroot.GrootTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGrootTypes
entryRuleGrootTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGrootTypesRule()); }
	iv_ruleGrootTypes=ruleGrootTypes
	{ $current=$iv_ruleGrootTypes.current; }
	EOF;

// Rule GrootTypes
ruleGrootTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getGrootTypesAccess().getGrootTypesAction_0_0(),
						$current);
				}
			)
			otherlv_1='Numboot'
			{
				newLeafNode(otherlv_1, grammarAccess.getGrootTypesAccess().getNumbootKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGrootTypesAccess().getValueInitializationNumParserRuleCall_0_2_0());
					}
					lv_value_2_0=ruleInitializationNum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGrootTypesRule());
						}
						set(
							$current,
							"value",
							lv_value_2_0,
							"edu.upb.lp.IAmGroot.InitializationNum");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getGrootTypesAccess().getGrootTypesAction_1_0(),
						$current);
				}
			)
			otherlv_4='Stroot'
			{
				newLeafNode(otherlv_4, grammarAccess.getGrootTypesAccess().getStrootKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGrootTypesAccess().getValueInitializationStrParserRuleCall_1_2_0());
					}
					lv_value_5_0=ruleInitializationStr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGrootTypesRule());
						}
						set(
							$current,
							"value",
							lv_value_5_0,
							"edu.upb.lp.IAmGroot.InitializationStr");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getGrootTypesAccess().getGrootTypesAction_2_0(),
						$current);
				}
			)
			otherlv_7='Boolt'
			{
				newLeafNode(otherlv_7, grammarAccess.getGrootTypesAccess().getBooltKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGrootTypesAccess().getValueInitializationBoolParserRuleCall_2_2_0());
					}
					lv_value_8_0=ruleInitializationBool
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGrootTypesRule());
						}
						set(
							$current,
							"value",
							lv_value_8_0,
							"edu.upb.lp.IAmGroot.InitializationBool");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleInitializationNum
entryRuleInitializationNum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitializationNumRule()); }
	iv_ruleInitializationNum=ruleInitializationNum
	{ $current=$iv_ruleInitializationNum.current; }
	EOF;

// Rule InitializationNum
ruleInitializationNum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getInitializationNumAccess().getAssignationNumParserRuleCall());
	}
	this_AssignationNum_0=ruleAssignationNum
	{
		$current = $this_AssignationNum_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleInitializationStr
entryRuleInitializationStr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitializationStrRule()); }
	iv_ruleInitializationStr=ruleInitializationStr
	{ $current=$iv_ruleInitializationStr.current; }
	EOF;

// Rule InitializationStr
ruleInitializationStr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getInitializationStrAccess().getAssignationStrParserRuleCall());
	}
	this_AssignationStr_0=ruleAssignationStr
	{
		$current = $this_AssignationStr_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleInitializationBool
entryRuleInitializationBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitializationBoolRule()); }
	iv_ruleInitializationBool=ruleInitializationBool
	{ $current=$iv_ruleInitializationBool.current; }
	EOF;

// Rule InitializationBool
ruleInitializationBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getInitializationBoolAccess().getAssignationBoolParserRuleCall());
	}
	this_AssignationBool_0=ruleAssignationBool
	{
		$current = $this_AssignationBool_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAssignation
entryRuleAssignation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignationRule()); }
	iv_ruleAssignation=ruleAssignation
	{ $current=$iv_ruleAssignation.current; }
	EOF;

// Rule Assignation
ruleAssignation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAssignationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignationAccess().getValueAssignationValueParserRuleCall_1_0());
				}
				lv_value_1_0=ruleAssignationValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignationRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"edu.upb.lp.IAmGroot.AssignationValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAssignationValue
entryRuleAssignationValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignationValueRule()); }
	iv_ruleAssignationValue=ruleAssignationValue
	{ $current=$iv_ruleAssignationValue.current; }
	EOF;

// Rule AssignationValue
ruleAssignationValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssignationValueAccess().getAssignationNumParserRuleCall_0());
		}
		this_AssignationNum_0=ruleAssignationNum
		{
			$current = $this_AssignationNum_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAssignationValueAccess().getAssignationStrParserRuleCall_1());
		}
		this_AssignationStr_1=ruleAssignationStr
		{
			$current = $this_AssignationStr_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAssignationValueAccess().getAssignationBoolParserRuleCall_2());
		}
		this_AssignationBool_2=ruleAssignationBool
		{
			$current = $this_AssignationBool_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssignationNum
entryRuleAssignationNum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignationNumRule()); }
	iv_ruleAssignationNum=ruleAssignationNum
	{ $current=$iv_ruleAssignationNum.current; }
	EOF;

// Rule AssignationNum
ruleAssignationNum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='->'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssignationNumAccess().getHyphenMinusGreaterThanSignKeyword_0());
		}
		(
			(
				lv_number_1_0=RULE_INT
				{
					newLeafNode(lv_number_1_0, grammarAccess.getAssignationNumAccess().getNumberINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignationNumRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleAssignationStr
entryRuleAssignationStr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignationStrRule()); }
	iv_ruleAssignationStr=ruleAssignationStr
	{ $current=$iv_ruleAssignationStr.current; }
	EOF;

// Rule AssignationStr
ruleAssignationStr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='->'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssignationStrAccess().getHyphenMinusGreaterThanSignKeyword_0());
		}
		(
			(
				lv_string_1_0=RULE_STRING
				{
					newLeafNode(lv_string_1_0, grammarAccess.getAssignationStrAccess().getStringSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignationStrRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleAssignationBool
entryRuleAssignationBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignationBoolRule()); }
	iv_ruleAssignationBool=ruleAssignationBool
	{ $current=$iv_ruleAssignationBool.current; }
	EOF;

// Rule AssignationBool
ruleAssignationBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='->'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssignationBoolAccess().getHyphenMinusGreaterThanSignKeyword_0());
		}
		(
			(
				lv_boolean_1_0=RULE_BOOLEAN
				{
					newLeafNode(lv_boolean_1_0, grammarAccess.getAssignationBoolAccess().getBooleanBOOLEANTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignationBoolRule());
					}
					setWithLastConsumed(
						$current,
						"boolean",
						lv_boolean_1_0,
						"edu.upb.lp.IAmGroot.BOOLEAN");
				}
			)
		)
	)
;

RULE_BOOLEAN : ('froot#'|'troot#');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
